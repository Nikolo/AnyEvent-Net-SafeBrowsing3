#
# Limit of memory used to store tuples to 100MB
# (0.1 GB)
# This effectively limits the memory, used by
# Tarantool. However, index and connection memory
# is stored outside the slab allocator, hence
# the effective memory usage can be higher (sometimes
# twice as high).
#
slab_alloc_arena = 1.5

#
# Store the pid in this file. Relative to
# startup dir.
#
pid_file = "safe_browsing_box.pid"

#
# Pipe the logs into the following process.
#
logger="cat - >> safe_browsing_tarantool.log"

#
# Read only and read-write port.
primary_port = 33013
# Read-only port.
secondary_port = 33014
#
# The port for administrative commands.
#
admin_port = 33015
#
# Each write ahead log contains this many rows.
# When the limit is reached, Tarantool closes
# the WAL and starts a new one.
rows_per_wal = 5000000

# Define a simple space with 1 HASH-based
# primary key.

# A_CHUNKS_SPACE
# fields: list(STR), chunknum(NUM), prefix(STR)
# index 0: all fields
# index 1: list + chunknum
# index 2: list + prefix
space[10].enabled = 1
space[10].index[0].type = "AVLTREE"
space[10].index[0].unique = 1
space[10].index[0].key_field[0].fieldno = 0
space[10].index[0].key_field[0].type = "STR"
space[10].index[0].key_field[1].fieldno = 1
space[10].index[0].key_field[1].type = "NUM"
space[10].index[0].key_field[2].fieldno = 2  
space[10].index[0].key_field[2].type = "STR"

space[10].index[1].type = "AVLTREE"
space[10].index[1].unique = 0
space[10].index[1].key_field[0].fieldno = 0
space[10].index[1].key_field[0].type = "STR"
space[10].index[1].key_field[1].fieldno = 2
space[10].index[1].key_field[1].type = "STR"

# S_CHUNKS_SPACE
# fields: list(STR), chunknum(NUM), add_num(NUM), prefix(STR)
# index 0: all fields
# index 1: list + chunknum
# index 2: list + prefix
space[11].enabled = 1
space[11].index[0].type = "AVLTREE"
space[11].index[0].unique = 1
space[11].index[0].key_field[0].fieldno = 0
space[11].index[0].key_field[0].type = "STR"
space[11].index[0].key_field[1].fieldno = 1
space[11].index[0].key_field[1].type = "NUM"
space[11].index[0].key_field[2].fieldno = 2
space[11].index[0].key_field[2].type = "NUM"
space[11].index[0].key_field[3].fieldno = 3
space[11].index[0].key_field[3].type = "STR"

space[11].index[1].type = "AVLTREE"
space[11].index[1].unique = 0
space[11].index[1].key_field[0].fieldno = 0
space[11].index[1].key_field[0].type = "STR"
space[11].index[1].key_field[1].fieldno = 3
space[11].index[1].key_field[1].type = "STR"

# FULL_HASHES_SPACE
# fields: list(STR), prefix (STR), hash(STR), timestamp(NUM)
# timestamp means time valid to 
# index 0: list + prefix + hash
# (for insert)
space[12].enabled = 1
space[12].index[0].type = "AVLTREE"
space[12].index[0].unique = 1
space[12].index[0].key_field[0].fieldno = 0
space[12].index[0].key_field[0].type = "STR"
space[12].index[0].key_field[1].fieldno = 1 
space[12].index[0].key_field[1].type = "STR"
space[12].index[0].key_field[2].fieldno = 2 
space[12].index[0].key_field[2].type = "STR"

# index 1: list + prefix
# (for select)
space[12].enabled = 1
space[12].index[1].type = "AVLTREE"
space[12].index[1].unique = 0
space[12].index[1].key_field[0].fieldno = 0
space[12].index[1].key_field[0].type = "STR"
space[12].index[1].key_field[1].fieldno = 1 
space[12].index[1].key_field[1].type = "STR"

# index 2: list + hash
# (for select)
space[12].enabled = 1
space[12].index[2].type = "AVLTREE"
space[12].index[2].unique = 0
space[12].index[2].key_field[0].fieldno = 0
space[12].index[2].key_field[0].type = "STR"
space[12].index[2].key_field[1].fieldno = 2 
space[12].index[2].key_field[1].type = "STR"
